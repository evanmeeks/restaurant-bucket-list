import React, { useState, useEffect } from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  FlatList,\n  TextInput,\n  ActivityIndicator,\n  SafeAreaView,\n  Platform,\n  Image,\n} from 'react-native';\nimport { ListItem } from '@rneui/themed';\nimport { useNavigation } from '@react-navigation/native';\nimport { foursquareV3Service, Coordinates } from 'core';\nimport { SearchNavigationProp } from '../../../navigation/types';\n\n// Austin coordinates (default location)\nconst DEFAULT_COORDINATES: Coordinates = {\n  latitude: 30.2672,\n  longitude: -97.7431,\n};\n\n// Default icon for when a venue doesn't have one\nconst DEFAULT_ICON = 'https://ss3.4sqi.net/img/categories_v2/food/default_88.png';\n\n// Fix image import\nconst defaultRestaurantImg = require('../../../assets/default_88.png');\n\nexport const SearchScreen: React.FC = () => {\n  const [searchQuery, setSearchQuery] = useState<string>('Restaurants');\n  const [venues, setVenues] = useState<any[]>([]);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [locationRetrieved, setLocationRetrieved] = useState<boolean>(true);\n  const [loaded, setLoaded] = useState<boolean>(false);\n\n  const navigation = useNavigation<SearchNavigationProp>();\n\n  // Search venues function - similar to the API test screen\n  const searchVenues = async (query: string) => {\n    if (!query.trim()) return;\n\n    setLoading(true);\n    setLoaded(false);\n\n    try {\n      const data = await foursquareV3Service.searchNearbyVenues(\n        DEFAULT_COORDINATES,\n        query,\n        undefined,\n        1000,\n        20\n      );\n\n      console.log('Foursquare API response:', data);\n\n      // Transform the results to match the expected format\n      const transformedVenues = data.results.map(venue => {\n        // Create a venue object that matches the structure expected by renderItem\n        return {\n          id: venue.fsq_id,\n          name: venue.name,\n          categories: venue.categories || [\n            {\n              name: 'Restaurant',\n              icon: {\n                prefix: 'https://ss3.4sqi.net/img/categories_v2/food/default_',\n                suffix: '.png',\n              },\n            },\n          ],\n          location: {\n            formattedAddress:\n              venue.location?.formatted_address ||\n              [venue.location?.address, venue.location?.locality, venue.location?.region]\n                .filter(Boolean)\n                .join(', '),\n            lat: venue.geocodes?.main?.latitude,\n            lng: venue.geocodes?.main?.longitude,\n          },\n          referralId: venue.fsq_id, // Required for keyExtractor\n        };\n      });\n\n      setVenues(transformedVenues);\n      setLoaded(true);\n    } catch (err: any) {\n      console.error('Error fetching venues:', err);\n      setVenues([]);\n      setLoaded(true);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Search handler - called when search input changes\n  const searchHandler = (value: string) => {\n    setSearchQuery(value);\n    if (global.setTimeout) {\n      // Use debounced search if setTimeout is available\n      global.setTimeout(() => searchVenues(value), 300);\n    } else {\n      // Fallback to immediate search\n      searchVenues(value);\n    }\n  };\n\n  // Initial search on component mount\n  useEffect(() => {\n    searchVenues(searchQuery);\n  }, []);\n\n  // Key extractor for the FlatList\n  const keyExtractor = (item: any) => {\n    return item.referralId.toString();\n  };\n\n  // Render item for the FlatList\n  const renderItem = ({ item }: { item: any }) => {\n    // Get icon URL\n    let iconUrl = DEFAULT_ICON;\n    if (\n      item.categories &&\n      item.categories.length > 0 &&\n      item.categories[0].icon &&\n      item.categories[0].icon.prefix &&\n      item.categories[0].icon.suffix\n    ) {\n      iconUrl = `${item.categories[0].icon.prefix}88${item.categories[0].icon.suffix}`;\n    }\n\n    const categoryName =\n      item.categories && item.categories.length > 0 ? item.categories[0].name : 'Restaurant';\n\n    return (\n      <ListItem\n        onPress={() => {\n          // Navigate to the Detail screen with the venue data\n          navigation.navigate('Detail', { itemData: item });\n        }}\n        bottomDivider\n      >\n        <Image\n          source={{ uri: iconUrl }}\n          style={styles.iconImage}\n          defaultSource={defaultRestaurantImg}\n        />\n        <ListItem.Content>\n          <ListItem.Title>{item.name}</ListItem.Title>\n          <ListItem.Subtitle style={styles.subtitleView}>\n            <Text style={styles.ratingText}>{categoryName}</Text>\n          </ListItem.Subtitle>\n        </ListItem.Content>\n        <ListItem.Chevron />\n      </ListItem>\n    );\n  };\n\n  // Render the restaurant list based on state\n  const renderRestaurantList = () => {\n    switch (`${locationRetrieved}|${loaded}`) {\n      case 'true|true':\n        return (\n          <View style={styles.listContainer}>\n            <TextInput\n              style={styles.searchInput}\n              onChangeText={text => searchHandler(text)}\n              placeholder=\"Restaurants\"\n              value={searchQuery}\n            />\n            <FlatList\n              data={venues}\n              keyExtractor={keyExtractor}\n              renderItem={renderItem}\n              contentContainerStyle={styles.flatListContent}\n            />\n          </View>\n        );\n      case 'false|false':\n        return (\n          <View style={styles.centerContainer}>\n            <Text style={styles.statusText}>Retrieving Location</Text>\n            <ActivityIndicator size=\"large\" color=\"#FF4500\" style={styles.loader} />\n          </View>\n        );\n      case 'true|false':\n        return (\n          <View style={styles.centerContainer}>\n            <Text style={styles.statusText}>Loading Restaurants and Venues</Text>\n            <ActivityIndicator size=\"large\" color=\"#FF4500\" style={styles.loader} />\n          </View>\n        );\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <View style={styles.header}>\n        <Text style={styles.title}>Restaurant Search</Text>\n      </View>\n      {renderRestaurantList()}\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#F8F8F8',\n  },\n  header: {\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    backgroundColor: '#FFFFFF',\n    ...Platform.select({\n      ios: {\n        shadowColor: '#000',\n        shadowOffset: { width: 0, height: 2 },\n        shadowOpacity: 0.1,\n        shadowRadius: 4,\n      },\n      android: {\n        elevation: 3,\n      },\n    }),\n  },\n  title: {\n    fontSize: 22,\n    fontWeight: 'bold',\n    color: '#333333',\n  },\n  listContainer: {\n    flex: 1,\n    padding: 16,\n  },\n  searchInput: {\n    height: 40,\n    borderColor: 'gray',\n    borderWidth: 1,\n    paddingHorizontal: 10,\n    marginBottom: 16,\n    borderRadius: 4,\n    backgroundColor: '#FFFFFF',\n  },\n  flatListContent: {\n    paddingBottom: 20,\n  },\n  centerContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 20,\n  },\n  statusText: {\n    fontSize: 18,\n    marginBottom: 20,\n    color: '#333333',\n  },\n  loader: {\n    marginTop: 10,\n  },\n  subtitleView: {\n    flexDirection: 'row',\n    paddingLeft: 2,\n    paddingTop: 5,\n  },\n  ratingText: {\n    paddingLeft: 2,\n    color: 'blue',\n  },\n  iconImage: {\n    width: 50,\n    height: 50,\n    backgroundColor: '#CCC',\n  },\n});\n\nexport default SearchScreen;